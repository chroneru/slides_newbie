contributors_csv,
set_type = person,
label_col = "name") %>%
add_nodes_from_table(
projects_csv,
set_type = "project",
label_col = "project") %>%
add_edges_from_table(
projects_and_contributors_csv,
from_col = "contributor_name",
#from_mapping = "name",
to_col = "project_name",
from_to_map = "name",
rel_col = "contributor_role")
# Create the property graph by adding the CSV data to a
# new graph; the `add_nodes_from_csv()` and
# `add_edges_from_csv()` functions are used to create
# nodes and edges in the graph
graph <-
create_graph() %>%
set_graph_name("software_projects") %>%
add_nodes_from_table(
contributors_csv,
set_type = "person",
label_col = "name") %>%
add_nodes_from_table(
projects_csv,
set_type = "project",
label_col = "project") %>%
add_edges_from_table(
projects_and_contributors_csv,
from_col = contributor_name,
#from_mapping = "name",
to_col = project_name,
from_to_map = name,
rel_col = contributor_role)
?add_nodes_from_table
# Create the property graph by adding the CSV data to a
# new graph; the `add_nodes_from_csv()` and
# `add_edges_from_csv()` functions are used to create
# nodes and edges in the graph
graph <-
create_graph() %>%
set_graph_name("software_projects") %>%
add_nodes_from_table(
contributors_csv,
set_type = person,
label_col = name) %>%
add_nodes_from_table(
projects_csv,
set_type = project,
label_col = project) %>%
add_edges_from_table(
projects_and_contributors_csv,
from_col = contributor_name,
#from_mapping = "name",
to_col = project_name,
from_to_map = name,
rel_col = contributor_role)
View(projects_csv)
# Create the property graph by adding the CSV data to a
# new graph; the `add_nodes_from_csv()` and
# `add_edges_from_csv()` functions are used to create
# nodes and edges in the graph
graph <-
create_graph() %>%
set_graph_name("software_projects") %>%
add_nodes_from_table(
contributors_csv,
set_type = person,
label_col = name) %>%
add_nodes_from_table(
projects_csv,
set_type = project,
label_col = project) #%>%
graph %>%
add_edges_from_table(
projects_and_contributors_csv,
from_col = contributor_name,
#from_mapping = "name",
to_col = project_name,
from_to_map = name,
rel_col = contributor_role)
graph
# View the graph
graph %>% render_graph(output = "visNetwork")
View(currencies)
View(usd_exchange_rates)
read.csv(contributors_csv, stringsAsFactors = FALSE) %>% head()
read.csv(projects_csv, stringsAsFactors = FALSE) %>% head()
read.csv(projects_and_contributors_csv, stringsAsFactors = FALSE) %>% head()
graph %>%
add_edges_from_table(
projects_and_contributors_csv,
from_col = contributor_name,
#from_mapping = "name",
to_col = project_name,
from_to_map = c(name,project),
rel_col = contributor_role)
graph %>%
add_edges_from_table(
projects_and_contributors_csv,
from_col = contributor_name,
#from_mapping = "name",
to_col = project_name,
from_to_map = list(name,project),
rel_col = contributor_role)
graph %>%
add_edges_from_table(
projects_and_contributors_csv,
from_col = contributor_name,
#from_mapping = "name",
to_col = project_name,
from_to_map = (name,project),
c
graph %>%
add_edges_from_table(
projects_and_contributors_csv,
from_col = contributor_name,
#from_mapping = "name",
to_col = project_name,
from_to_map = c(name,project),
rel_col = contributor_role)
graph %>%
add_edges_from_table(
projects_and_contributors_csv,
from_col = contributor_name,
#from_mapping = "name",
to_col = project_name,
from_to_map = name,
rel_col = contributor_role)
graph %>%
add_edges_from_table(
projects_and_contributors_csv,
from_col = contributor_name,
#from_mapping = "name",
to_col = project_name,
from_to_map = project,
rel_col = contributor_role)
graph %>%
add_edges_from_table(
projects_and_contributors_csv,
from_col = contributor_name,
#from_mapping = "name",
to_col = project_name,
from_to_map = contributor_name,
rel_col = contributor_role)
graph %>%
add_edges_from_table(
projects_and_contributors_csv,
from_col = contributor_name,
#from_mapping = "name",
to_col = project_name,
from_to_map = NULL,
rel_col = contributor_role)
get_node_df(graph)
graph %>%
add_edges_from_table(
projects_and_contributors_csv,
from_col = contributor_name,
#from_mapping = "name",
to_col = project_name,
from_to_map = label,
rel_col = contributor_role)
# View the graph
graph %>% render_graph(output = "visNetwork")
graph %>%
add_edges_from_table(
projects_and_contributors_csv,
from_col = contributor_name,
#from_mapping = "name",
to_col = project_name,
from_to_map = type,
rel_col = contributor_role)
graph %>%
add_edges_from_table(
projects_and_contributors_csv,
from_col = contributor_name,
#from_mapping = "name",
to_col = project_name,
from_to_map = type,
rel_col = contributor_role)
graph %>%
add_edges_from_table(
projects_and_contributors_csv,
from_col = contributor_name,
#from_mapping = "name",
to_col = project_name,
from_to_map = label,
rel_col = contributor_role)
graph %>%
add_edges_from_table(
projects_and_contributors_csv,
from_col = contributor_name,
#from_mapping = "name",
to_col = project_name,
from_to_map = label,
rel_col = contributor_role)
projects_csv,
# Create the property graph by adding the CSV data to a
# new graph; the `add_nodes_from_csv()` and
# `add_edges_from_csv()` functions are used to create
# nodes and edges in the graph
graph <-
create_graph() %>%
set_graph_name("software_projects") %>%
add_nodes_from_table(
contributors_csv,
set_type = person,
label_col = name) %>%
add_nodes_from_table(
projects_csv,
set_type = project,
label_col = project) %>%
add_edges_from_table(
projects_and_contributors_csv,
from_col = contributor_name,
#from_mapping = "name",
to_col = project_name,
from_to_map = label,
rel_col = contributor_role)
# View the graph
graph %>% render_graph(output = "visNetwork")
get_node_df(graph)
graph_scale_width_edges <-
graph %>%
select_edges() %>%
rescale_edge_attrs_ws(
"commits", "width", 0.5, 3.0)
?rescale_edge_attrs
graph_scale_width_edges <-
graph %>%
select_edges() %>%
rescale_edge_attrs(
edge_attr_from = "commits", edge_attr_to = "width",
to_lower_bound = 0.5, to_upper_bound = 3.0)
# Inspect the graph's internal EDF
get_edge_df(graph_scale_width_edges)
# Inspect the graph's internal EDF
get_edge_df(graph_scale_width_edges)
get_edge_df(graph_scale_width_edges)
# View the graph, larger edges and arrows
# indicate higher numbers of `commits`
graph_scale_width_edges %>% render_graph(output = "visNetwork")
graph_scale_color_edges <-
graph %>%
select_edges() %>%
rescale_edge_attrs_ws(
"commits", "color", "gray95", "gray5")
graph_scale_color_edges <-
graph %>%
select_edges() %>%
rescale_edge_attrs(
edge_attr_from = "commits", edge_attr_to ="color",
to_lower_bound = "gray95", to_upper_bound =  "gray5")
# Render the graph, darker edges represent higher
# commits
graph_scale_color_edges %>% render_graph(output = "visNetwork")
graph <-
graph %>%
add_edge(
get_nodes(.,
"name", "Kim"),
get_nodes(.,
"project", "stringbuildeR"),
"contributor") %>%
select_last_edge %>%
set_edge_attrs_ws("commits", 15) %>%
clear_selection
get_node_ids(.,
conditions = name == "Kim"),
graph <-
graph %>%
add_edge(
get_node_ids(.,
conditions = name == "Kim"),
get_node_ids(.,
conditions = project == "stringbuildeR"),
"contributor") %>%
select_last_edge %>%
set_edge_attrs_ws("commits", 15) %>%
clear_selection
graph <-
graph %>%
add_edge(
get_node_ids(.,
conditions = name == "Kim"),
get_node_ids(.,
conditions = project == "stringbuildeR"),
"contributor") #%>%
graph %>% get_node_df()
graph <-
graph %>%
add_edge(
get_node_ids(.,
conditions = label == "Kim"),
get_node_ids(.,
conditions = label == "stringbuildeR"),
"contributor") %>%
select_last_edge() %>%
set_edge_attrs_ws("commits", 15) %>%
clear_selection()
select_last_edges_created()
graph <-
graph %>%
add_edge(
get_node_ids(.,
conditions = label == "Kim"),
get_node_ids(.,
conditions = label == "stringbuildeR"),
"contributor") %>%
select_last_edges_created() %>%
set_edge_attrs_ws("commits", 15) %>%
clear_selection()
# View the graph's internal EDF, the newest
# edge is at the bottom
get_edge_df(graph)
get_edge_df(graph)
# View the graph to see the new edge
graph %>% render_graph
# View the graph to see the new edge
graph %>% render_graph(output = "grViz")
# View the graph to see the new edge
graph %>% render_graph(output = "grViz")
?render_graph
# View the graph to see the new edge
graph %>% render_graph(output = "graph")
# View the graph to see the new edge
graph %>% render_graph(output = "visNetwork")
testa <- function() print("a")
testa_obj <- "testa"
testfun <- function(fun) {fun(); print(environment())}
testfun(testa)
testfun(testa)
#options(prompt = "#> $ ")
#options(continue = "#> $ ") #行末継続子
knitr::opts_chunk$set(
comment = "#>",
collapse = TRUE,
fig.show = "hold",
fig.width = 6,
fig.asp = 0.618,
out.width = "70%",
fig.align = "center"
)
#TRUEでprompt表示
#knitr::opts_current$set(prompt=FALSE, eval = FALSE)
#rmarkdown::render("newbie_workshop.Rmd", "revealjs_presentation", "newbie_workshop.html")
#rmarkdown::render("newbie_workshop.Rmd", "html_document", "newbie_workshop_pages.html")
library(tidyverse)
library(DiagrammeR)
library(leaflet)
repeat(1:3, testfun(testa))
testa <- function() print("a")
testa_obj <- "testa"
testfun <- function(fun) {fun(); print(environment())}
repeat(1:3, testfun(testa))
?repeat
?repeat
?repeat()
?repeat
?replicate
replicate(1:3, testfun(testa))
testa <- function() print("a")
testa_obj <- "testa"
testfun <- function(fun) {fun(); print(environment())}
replicate(1:3, testfun(testa))
?repeat
?"repeat"
?replicate
replicate(3, testfun(testa))
#options(prompt = "#> $ ")
#options(continue = "#> $ ") #行末継続子
knitr::opts_chunk$set(
comment = "#>",
collapse = TRUE,
fig.show = "hold",
fig.width = 6,
fig.asp = 0.618,
out.width = "70%",
fig.align = "center"
)
#TRUEでprompt表示
#knitr::opts_current$set(prompt=FALSE, eval = FALSE)
#rmarkdown::render("newbie_workshop.Rmd", "revealjs_presentation", "newbie_workshop.html")
#rmarkdown::render("newbie_workshop.Rmd", "html_document", "newbie_workshop_pages.html")
library(tidyverse)
library(DiagrammeR)
library(leaflet)
(test_unknown <- "Hello")
for(i in 1:n) {
var <- (var + var/tmp) / 2
}})(2, 10)
(function(var, n) {
tmp <- var
for(i in 1:n) {
var <- (var + var/tmp) / 2
}})(2, 10)
(function(var, n) {
tmp <- var
for(i in 1:n) {
var <- (var + var/tmp) / 2
}})(2, 10)
return(var)})(2, 10)
(function(var, n) {
tmp <- var
for(i in 1:n) {
var <- (var + var/tmp) / 2
}
return(var)})(2, 10)
(function(var, n) {
tmp <- var
for(i in 1:n) {
var <- (var + tmp/var) / 2
}
return(var)})(2, 10)
#microbenchmark::microbenchmark(
esd = function() eval(substitute(do.call("func", args = list(r = 10)), env = list(func = "rnorm")))#,
esd()
substitute(do.call("func", args = list(r = 10)), env = list(func = "rnorm"))
#eval(
substitute(
data <- do.call(
fun1,
list(
x = do.call(
fun2,
list(n = arg1)
)
)
),
args
)#,
args <- list(
data = "x",
fun1 = "mean",
fun2 = "rnorm",
arg1 = "2"
)
#eval(
substitute(
data <- do.call(
fun1,
list(
x = do.call(
fun2,
list(n = arg1)
)
)
),
args
)#,
substitute(do.call(func, args = list(r = 10)), env = list(func = "rnorm"))
#microbenchmark::microbenchmark(
esd = function() eval(substitute(do.call(func, args = list(r = 10)), env = list(func = "rnorm")))#,
esd()
args(rnorm)
#microbenchmark::microbenchmark(
esd = function() eval(substitute(do.call(func, args = list(n = 10)), env = list(func = "rnorm")))#,
esd()
ep  = function() eval(parse(paste0("func", "(", r ,")"), env = list(func = "rnorm", n = 10)))#,
sp()
ep()
parse(paste0("func", "(", r ,")"), env = list(func = "rnorm", n = 10))
?parse
paste0("func", "(", n ,")")
paste0("func", "(", "n" ,")")
parse(paste0("func", "(", "n" ,")"), env = list(func = "rnorm", n = 10))
ep  = function() eval(parse(paste0("func", "(", r ,")"), env = list(func = "rnorm", n = 10)))#,
parse(paste0("func", "(", "n" ,")"))
parse(text = paste0("func", "(", "n" ,")"))
eval(parse(text = paste0("func", "(", "n" ,")")), envir = list(func = "rnorm", n = 10))
eval(parse(text = paste0("rnorm", "(", "n" ,")")), envir = list(func = "rnorm", n = 10))
eval(parse(text = paste0("rnorm", "(", "n" ,")")), envir = list( n = 10))
eval(parse(text = paste0("func", "(", "n" ,")")), envir = list(func = "rnorm", n = 10))
eval(parse(text = paste0("func", "(", "n" ,")")), envir = list(rnorm = "func", n = 10))
ep  = function() eval(parse(paste0("rnorm", "(", "n" ,")")), envir = list(n = 10)))#,
ep  = function() eval(parse(paste0("rnorm", "(", "n" ,")")), envir = list(n = 10))#,
ep()
ep  = function() eval(parse(text = paste0("rnorm", "(", "n" ,")")), envir = list(n = 10))#,
ep()
microbenchmark::microbenchmark(
esd = function() eval(substitute(do.call(func, args = list(n = 10)), env = list(func = "rnorm"))),
ep  = function() eval(parse(text = paste0("rnorm", "(", "n" ,")")), envir = list(n = 10)),
times = 20
)
microbenchmark::microbenchmark(
esd = function() eval(substitute(do.call(func, args = list(n = 10)), env = list(func = "rnorm"))),
ep  = function() eval(parse(text = paste0("rnorm", "(", "n" ,")")), envir = list(n = 10)),
times = 100
)
microbenchmark::microbenchmark(
esd = function() eval(substitute(do.call(func, args = list(n = 30)), env = list(func = "rnorm"))),
ep  = function() eval(parse(text = paste0("rnorm", "(", "n" ,")")), envir = list(n = 30)),
times = 20
)
microbenchmark::microbenchmark(
esd = function() eval(do.call("rnorm", args = list(n = 30))),
ep  = function() eval(parse(text = paste0("rnorm", "(", "n" ,")")), envir = list(n = 30)),
times = 20
)
set.seed(20)
microbenchmark::microbenchmark(
esd = function() eval(substitute(do.call(func, args = list(n = 30)), env = list(func = "rnorm"))),
ep  = function() eval(parse(text = paste0("rnorm", "(", "n" ,")")), envir = list(n = 30)),
times = 20
)
microbenchmark::microbenchmark(
esd = function() eval(substitute(do.call(func, args = list(n = 30)), env = list(func = "rnorm"))),
ep  = function() eval(parse(text = paste0("rnorm", "(", "n" ,")")), envir = list(n = 30)),
times = 20
)
